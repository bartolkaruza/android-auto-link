import groovy.json.JsonSlurper
import org.gradle.initialization.DefaultSettings

def generatedFileName = "PackageList.java"
def generatedFileContentsTemplate = """
package com.facebook.react;

import com.facebook.react.ReactPackage;
import com.facebook.react.shell.MainReactPackage;
import java.util.Arrays;
import java.util.List;

{{ packageImports }}

public class PackageList {    
  public static List<ReactPackage> getPackages () {
    return Arrays.<ReactPackage>asList(
      new MainReactPackage(){{ packageClassInstances }}
    );
  }
}
"""

class ReactNativeAutoModules {
  private Project project
  private DefaultSettings defaultSettings
  private ArrayList<HashMap<String, String>> reactNativeModules
  private static String REACT_NATIVE_CONFIG_CMD = "cat ./test.json"
  // private static String REACT_NATIVE_CONFIG_CMD = "react-native config"

  /**
   *
   * @param defaultSettings
   */
  void applySettingsGradle(DefaultSettings defaultSettings) {
    this.defaultSettings = defaultSettings
    this.reactNativeModules = this.getReactNativeConfig()
    addReactNativeModuleProjects()
  }

  /**
   *
   */
  void addReactNativeModuleProjects() {
    reactNativeModules.forEach { reactNativeModule ->
      String name = reactNativeModule["name"]
      String androidSourceDir = reactNativeModule["androidSourceDir"]
      defaultSettings.include(":${name}")
      defaultSettings.project(":${name}").projectDir = new File("${androidSourceDir}")
    }
  }

  /**
   *
   * @param project
   */
  void applyBuildGradle(Project project) {
    this.project = project
    this.reactNativeModules = this.getReactNativeConfig()
    addReactNativeModuleDependencies()
  }

  /**
   *
   */
  void addReactNativeModuleDependencies() {
    reactNativeModules.forEach { reactNativeModule ->
      def name = reactNativeModule["name"]
      project.dependencies {
        implementation project(path: ":${name}")
      }
    }
  }

  /**
   *
   * @param outPutDir
   * @param generatedFileName
   * @param generatedFileContentsTemplate
   */
  void generatePackagesFile(File outPutDir, String generatedFileName, String generatedFileContentsTemplate) {
    ArrayList<HashMap<String, String>>[] packages = this.reactNativeModules

    String packageImports = ""
    String packageClassInstances = ""

    if (packages.size() > 0) {
      packageImports = packages.collect { "// ${it.name}\n${it.packageImportPath}" }.join(';\n')
      packageClassInstances = ",\n      " + packages.collect { it.packageInstance }.join(',')
    }

    String generatedFileContents = generatedFileContentsTemplate
      .replace("{{ packageImports }}", packageImports)
      .replace("{{ packageClassInstances }}", packageClassInstances)

    outPutDir.mkdirs()
    final FileTreeBuilder treeBuilder = new FileTreeBuilder(outPutDir)
    treeBuilder.file(generatedFileName).newWriter().withWriter { w ->
      w << generatedFileContents
    }
  }

  /**
   *
   * @return
   */
  ArrayList<HashMap<String, String>> getReactNativeConfig() {
    if (this.reactNativeModules != null) return this.reactNativeModules
    ArrayList<HashMap<String, String>> reactNativeModules = new ArrayList<HashMap<String, String>>()

    def cmdProcess = REACT_NATIVE_CONFIG_CMD.execute()
    def reactNativeConfigOutput = cmdProcess.in.text

    def json = new JsonSlurper().parseText(reactNativeConfigOutput)

    json.forEach { value ->
      String name = value["name"]
      String path = value["path"]
      def config = value["config"]
      def androidConfig = config["android"]

      if (androidConfig != null) {
        String androidSourceDir = androidConfig["sourceDir"]
        HashMap reactNativeModuleConfig = new HashMap<String, String>()

        reactNativeModuleConfig.put("name", name)
        reactNativeModuleConfig.put("packageImportPath", androidConfig["packageImportPath"])
        reactNativeModuleConfig.put("packageInstance", androidConfig["packageInstance"])
        reactNativeModuleConfig.put("path", path)
        reactNativeModuleConfig.put("androidSourceDir", androidSourceDir)
        reactNativeModules.add(reactNativeModuleConfig)
      }
    }

    return reactNativeModules
  }
}
/** -----------------------
 *    Exported Extensions
 * ------------------------ */

def autoModules = new ReactNativeAutoModules()

ext.applyNativeModulesSettingsGradle = { DefaultSettings defaultSettings ->
  autoModules.applySettingsGradle(defaultSettings)
}

ext.applyNativeModulesAppBuildGradle = { Project project ->
  autoModules.applyBuildGradle(project)

  def generatedSrcDir = new File(buildDir, "generated/rncli/src/main/java/com/facebook/react")

  task generatePackageList << {
    autoModules.generatePackagesFile(generatedSrcDir, generatedFileName, generatedFileContentsTemplate)
  }

  preBuild.dependsOn generatePackageList

  android {
    sourceSets {
      main {
        java {
          srcDirs += generatedSrcDir
        }
      }
    }
  }
}

